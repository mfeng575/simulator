package com.kuali.simulator.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import com.kuali.simulator.common.Constants;
import com.kuali.simulator.common.Constants.DIRECTION;
import com.kuali.simulator.common.Constants.ELEVATOR_STATE;
import com.kuali.simulator.controller.ElevatorController;

public class Elevator {

	private String name;
	private int currentFloor = 1;
	private Integer nextStop = null;
	private int totalFloorsTravelled = 0;
	private HashSet<Integer> stops = new HashSet<Integer>();
	private DIRECTION movingDirection;
	private ELEVATOR_STATE state;
	
	public Elevator (String name, int initialFloor, ElevatorController controller)
	{
		this.name = name;		
		this.currentFloor = initialFloor;
		
		run();
	}
	
	private void run()
	{
		// simulate the elevator running
		while(true)
		{
			// if not found any floor to stop, then stop
			if(stops.isEmpty())
			{
				movingDirection = DIRECTION.NONE;
				state = ELEVATOR_STATE.IDLE;
				// do nothing and skip all logic
				continue;
			}
			
			if(stops.containsKey(currentFloor))
			{
				state = ELEVATOR_STATE.LOADING;
				// if this is the floor, then stop and open the door
				
				// TODO unload passengers
				
				// TODO load passengers
				
				// remove the stop
				stops.remove(currentFloor);
				
				Thread.sleep(Constants.timeOpenCloseDoor);
			}
			
			//  TODO found the nearest stop and moving to that direction
			nextStop = findNextStop();
			
			movingDirection = nextStop > currentFloor ? DIRECTION.UP : DIRECTION.DOWN;
			
			state = ELEVATOR_STATE.TRANSIT;
			Thread.sleep(Constants.timeMovingBetweenFloor);
			currentFloor += movingDirection == DIRECTION.DOWN ? -1 : 1;
			totalFloorsTravelled ++;
			
			// update current floor
			currentFloor += movingDirection == DIRECTION.UP ? 1 : -1; 	
			totalFloorsTravelled++;
		}
	}
	
	private Integer findNextStop()
	{
		// find the nearest stop
		return -1;
	}
	
	public boolean underMaintenance()
	{
		return totalFloorsTravelled > 100; // too small? how do you define a trip?
	} 
	
}
